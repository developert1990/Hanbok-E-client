name: Building App CI

on: workflow_dispatch
# master branch로 pull_request 할때 실행되도록
  # pull_request:
  #   branches:
  #   - master

jobs:
  my-build:    # 내가 알아서 정할 수 있음 (이름)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.18]

    steps:
      - name: Checking out repository code
        uses: actions/checkout@v2 # git clone 하는 action 예를 들어서 npm 에서 install 하는거랑 비슷

      - name: Use Node.js ${{ matrix.node-version }}
          # npm install / 패키지이름 github action에서 사용하기 때문에 actions/ 
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Building react app

      # 지금 이 폴더보면 yarn.lock 이 지정되있기 때문에 무언가 install 을할때 yarn add 이런식으로 해줘야한다 그래서 yarn 을 설치하고 npm install 과 같은 yarn을 실행시켰다.

        run: |
          npm install -g yarn
          yarn
          echo "REACT_APP_API_BASE=$REACT_APP_API_BASE" > .env
          yarn build
        env:
        # react-app 에서는 환경변수를 반드시 REACT_APP_ 이것을 앞에 추가해서 설정을 해줘야지 읽을수가 있다.
          REACT_APP_API_BASE: ${{ secrets.REACT_APP_API_BASE }}
        # run: |
        #   npm run build
        #   npm test
      # - name: Testing app
      #   run: npm test



      # 앞서 진행한 AWS_test 에서 
      # env: # 환경변수
      #   CI: true # 보통 CI라는 환경변수가 정해져있으면 CI환경에 맞게 최적화 해주기 위해서 사용해줬다. 이거 사용해 줫다. 이러면 프로젝트를 최적화하기 때문에 쓰지않는 함수나 변수같은것들이 잡히게 되면 오류로 잡아버린다.